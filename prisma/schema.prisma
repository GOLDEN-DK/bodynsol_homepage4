generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id             String   @id @default(cuid())
  title          String
  description    String?
  imageUrl       String
  imageWidth     Int
  imageHeight    Int
  link           String?
  isActive       Boolean  @default(true)
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  mediaType      String   @default("image")
  transitionTime Int      @default(5)
}

model Course {
  id              String             @id @default(cuid())
  title           String
  description     String
  thumbnailUrl    String
  thumbnailWidth  Int
  thumbnailHeight Int
  category        String
  curriculum      String?
  schedule        String?
  price           Int?
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  slug            String             @unique
  target          String?
  applications    Application[]
  courseInstructors CourseInstructor[]
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  imageUrl    String
  imageWidth  Int
  imageHeight Int
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  name        String
  content     String
  rating      Int
  imageUrl    String?
  imageWidth  Int?
  imageHeight Int?
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  type        String
  url         String
  width       Int
  height      Int
  size        Int
  mimeType    String
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EduCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("edu_category")
}

model Teacher {
  id             String             @id @default(cuid())
  name           String
  bio            String?
  experience     String?
  certifications String?
  profileImage   String?
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  CourseInstructor CourseInstructor[]

  @@map("edu_teacher")
}

model admin {
  id            Int     @id @default(autoincrement())
  username      String  @unique @db.VarChar(64)
  email         String  @unique @db.VarChar(120)
  password_hash String? @db.VarChar(256)
}

model article {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(200)
  content     String
  summary     String?   @db.VarChar(500)
  source_link String?   @db.VarChar(500)
  created_at  DateTime? @db.Timestamp(6)
  author      String?   @db.VarChar(100)
  category_id Int?
  is_main     Boolean?
  main_image  String?   @db.VarChar(500)
  category    category? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model category {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(50)
  slug    String    @unique @db.VarChar(50)
  article article[]
}

// 다대다 관계 테이블: 강좌-강사 연결
model CourseInstructor {
  id         String   @id @default(cuid())
  courseId   String
  teacherId  String
  role       String?  // 선택적 필드: 강사 역할 (주강사, 보조강사 등)
  order      Int      @default(0) // 표시 순서
  createdAt  DateTime @default(now())
  
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  @@unique([courseId, teacherId]) // 한 강좌에 같은 강사가 중복되지 않도록
  @@index([courseId])
  @@index([teacherId])
  
  @@map("course_instructor")
}

// 추가: Application 모델 정의
model Application {
  id                String   @id @default(cuid())
  courseId          String
  scheduleId        String?
  koreanName        String
  englishName       String?
  email             String
  phone             String
  gender            String?
  age               String?
  occupation        String?
  region            String?
  pilatesExperience String?
  question          String?
  paymentMethod     String?
  price             Int?     // 원래 교육비
  discountedPrice   Int?     // 할인된 교육비
  status            String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  course            Course   @relation(fields: [courseId], references: [id])
  
  @@index([courseId])
}
